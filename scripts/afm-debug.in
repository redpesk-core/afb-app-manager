#!/bin/bash

###########################################################################
# Copyright (C) 2015-2022 IoT.bzh Company
#
# Author: Stephane Desneux <sdx@iot.bzh>
#         Sebastien Douheret <sebastien@iot.bzh>
#
# $RP_BEGIN_LICENSE$
# Commercial License Usage
#  Licensees holding valid commercial IoT.bzh licenses may use this file in
#  accordance with the commercial license agreement provided with the
#  Software or, alternatively, in accordance with the terms contained in
#  a written agreement between you and The IoT.bzh Company. For licensing terms
#  and conditions see https://www.iot.bzh/terms-conditions. For further
#  information use the contact form at https://www.iot.bzh/contact.
#
# GNU General Public License Usage
#  Alternatively, this file may be used under the terms of the GNU General
#  Public license version 3. This license is as published by the Free Software
#  Foundation and appearing in the file LICENSE.GPLv3 included in the packaging
#  of this file. Please review the following information to ensure the GNU
#  General Public License requirements will be met
#  https://www.gnu.org/licenses/gpl-3.0.html.
# $RP_END_LICENSE$
###########################################################################

# This script should be invoked by gdb client through a ssh connection.
# It relays gdbmi protocol from gdbserver to gdb client
#
# WARNING: nothing should be sent to stdout except gdbserver output

# FIXME: add support of --debugger option to support tcf or gdb-remote


function error() {
	echo "ERR: $@" >&2
	exit 1
}
function info() {
	echo "INF: $@" >&2
}

# setup debug dir (shared with service file)
DBGDIR=@afm_platform_rundir@/debug
mkdir -p $DBGDIR

# check application name passed as first arg by gdb
APP=$1
[[ -z "$APP" ]] && error "Invalid application name"

# redirect to log file
exec 2>$DBGDIR/$APP.dbgclt.log

# activate DEBUG in environment file sourced in systemd service
AFB_WAIT_POINT="start-start"
echo "AFB_DEBUG_WAIT=$AFB_WAIT_POINT" >$DBGDIR/$APP.env

# remove debug env file on exit
trap "rm $DBGDIR/$APP.*" STOP INT QUIT EXIT

# ask appfw to start application
pid=$(afm-util start $APP)
[[ -z "$pid" || ! -e "/proc/$pid" ]] && error "Failed to start application $APP"
info "$APP started with pid=$pid"

# wait debugging process is stop/waiting at start-start point
AFB_FILE=/tmp/afb-debug-$pid
tmo=100
info "Waiting for process stopped..."
while [[ ! -e "$AFB_FILE" ]]; do
    sleep 0.1
    tmo=$(expr $tmo - 1)
    [[ "$tmo" == "0" ]] && error "Timeout waiting for process $pid stopped"
done

info "Waiting for process stopped..."
AFB_WAIT_FILE=/tmp/afb-debug-$pid
tmo=100
res=1
while [[ "$res" != "0" ]]; do
    sleep 0.1
    tmo=$(expr $tmo - 1)
    [[ "$tmo" == "0" ]] && error "Timeout waiting for process $pid stopped"
    grep $AFB_WAIT_POINT $AFB_WAIT_FILE > /dev/null 2>&1
    res=$?
done

# debugging
info "Attaching gdbserver to pid $pid ..."
gdbserver --attach - $pid

# end of debug session
info "proxy connection terminated - killing $APP (pid $pid)"
afm-util kill $pid >&2
info "$APP killed"
